import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import CreateFood from '../components/CreateFood'
import axiosInstance from '../services/axios'
import styles from '../styles/Home.module.css'
import { useState, useEffect } from 'react';
import FoodList from '../components/FoodList'
import Food from '../types/Food'
import { Alert } from '@mui/material'
import { Filter } from '../components/Filter/Filter'
import { Dayjs } from 'dayjs';
import useApp from '../hooks/useApp'
import FilterType from '../types/FilterType'


const Home: NextPage = () => {
  const [foods, setFoods] = useState<Array<Food>>([])
  const [fFoods, setFFoods] = useState<Array<Food>>([])
  const [warning, setWarning] = useState<String>("")
  const [filter, setFilter] = useState<FilterType|null>(null)
  const {user=null} = useApp()
  console.log({user})
  useEffect(()=>{
    readFood()
    
  }, [])
  const readFood = ()=>{
    axiosInstance.get(`/user/foods` ).then(({data})=>{
      console.log(data)
      setFoods(data.data)
    })
  }
  const getPriceOfThisMonth=()=>{
    const sum = foods.filter(food=>{
      return new Date(food.date).getMonth() === new Date().getMonth()
    }).reduce((a,b)=>a+b.price, 0)
    console.log("getPriceOfThisMonth",{sum})
    return sum
  }
  const getCalorieOfThisMonth=()=>{
    const sum = foods.filter(food=>{
      return new Date(food.date).getDate() === new Date().getDate()
    }).reduce((a,b)=>a+b.calorie, 0)
    console.log("getCalorieOfThisMonth", {sum})
    return sum
  }
  const handleSubmit=(sData: Food)=>{
    if(parseFloat(getPriceOfThisMonth().toString())+(parseFloat(sData.price.toString()))>(user!==null?user.p_limit_per_month:1000)){
      setWarning("Reached the monthly limit for price")
      return;
    }
    if(parseFloat(getCalorieOfThisMonth().toString())+parseFloat(sData.calorie.toString())>(user!==null?user.c_limit_per_day:2100)){
      console.log("calorie limit", parseFloat(getCalorieOfThisMonth().toString())+parseFloat(sData.calorie.toString()))
      setWarning("Reached the daily limit for calorie")
      return;
    }
    axiosInstance.post(`/user/foods/create`, sData).then(({data})=>{
      console.log(data)
      setFoods([...foods, data])
    })
  }
  const handleDelete = (id: number)=>{
    axiosInstance.post(`/user/foods/delete`, {id}).then(({data})=>{
      console.log(data)
      let temp = foods
      temp = temp.filter((f:Food)=>(f.id!==id))
      setFoods(temp)
    })
  }
  const handleChangeFilter = (filter: FilterType)=>{
    setFilter(filter)
  }
  useEffect(()=>{
    if(filter===null){
      return setFFoods(foods)
    }
    console.log({filter})
    const temp = foods.filter((food)=>{
      if(filter.search === null || filter.search==="") return true
      return food.name.includes(filter.search)
    }).filter((food)=>{
      if(filter.from===null) return true
      const from = new Date(filter.from.toISOString())
      return new Date(food.date) >= from
    }).filter((food)=>{
      if(filter.to===null) return true
      const to = new Date(filter.to.toISOString())
      return new Date(food.date) <= to
    })
    setFFoods(temp)
  },[filter, foods])
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div>
        <CreateFood onSubmit={(v: Food)=>handleSubmit(v)}>
          {
            warning!=="" &&
            <Alert severity="warning" sx={{mt:2}}>{warning}</Alert>
          }
        </CreateFood>
        <Filter search={""} from={null} to={null} onChange={handleChangeFilter} onReset={()=>{}}></Filter>
        <FoodList foods={fFoods} onDelete={handleDelete}/>
      </div>
    </div>
  )
}

export default Home
